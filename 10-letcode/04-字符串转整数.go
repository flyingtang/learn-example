package letcode

import (
	"strings"
)

// 在找到第一个非空字符之前，需要移除掉字符串中的空格字符。如果第一个非空字符是正号或负号，选取该符号，并将其与后面尽可能多的连续的数字组合起来，这部分字符即为整数的值。如果第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。

// 字符串可以在形成整数的字符后面包括多余的字符，这些字符可以被忽略，它们对于函数没有影响。

// 当字符串中的第一个非空字符序列不是个有效的整数；或字符串为空；或字符串仅包含空白字符时，则不进行转换。

// 若函数不能执行有效的转换，返回 0。

// 去掉空字符
// 正负号要 + 后面整数 ，非数字去掉

var nummap = map[string]int{
	"1": 1,
	"2": 2,
	"3": 3,
	"4": 4,
	"5": 5,
	"6": 6,
	"7": 7,
	"8": 8,
	"9": 9,
	"0": 0,
}

func MyAtoi(s string) (res int32) {

	s = strings.TrimSpace(s)
	length := len(s)
	for i := 0; i < length; i++ {
		// ts := string(s[i])
		// _, ok := nummap[ts]
		// 判断位置
	}
	return 0
}
